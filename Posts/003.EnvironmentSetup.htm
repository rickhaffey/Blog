Before digging into the details of different image processing and analysis techniques, we'll need to get ourselves set up so that we can use both Matlab and OpenCV.

In this post, I'll spend some time setting those up and running quick tests to confirm that the setups were successful.

A couple of notes:
<ul>
<li>In most cases I'll be building and running my code (and providing examples) on a machine running Windows Vista or Windows 7.</li>
<li>For almost all of the C++ code examples, I'll be using Visual Studio 2010 as my IDE.</li>
</ul>

As a result, my setup steps and code examples will typically be from the Windows Vista / Windows 7 and Visual Studio 2010 perspective.  (Going forward, I'll make sure to explicitly note any situations where that's <em>not</em> the case.)

<h1>Matlab</h1>
Matlab is the easier of the two tools to setup. It simply involves running an installer, copying some test code and image files, and actually running the test.

First run the Matlab install.  After that completes, take the following steps to confirm that everything is set up and running correctly:

<ol>
<li>Start Matlab</li>
<li>If the command window isn't visible, display it by selecting <strong>Desktop &gt; Command Window</strong>.
<li>Enter the following code into the command window:
[sourcecode language="matlab"]
	% open windows explorer in the current working directory
	dos(['explorer.exe "' pwd '" &'])
[/sourcecode]
<li>Copy <a href="http://rickhaffey.files.wordpress.com/2011/06/matlab.jpg">Matlab.jpg</a> into the windows explorer window opened as a result of running the previous command.</li>
<li>Enter the following code into the command window:
[sourcecode language="matlab"]
 	% load and display the image
	I = imread('Matlab.jpg');
	imshow(I, []);
[/sourcecode]
</li>
</ol>

At this point, you should see a new Matlab window showing the <em>Matlab.jpg</em> demo image.

<h1>OpenCV</h1>
Getting OpenCV integrated with Visual Studio 2010 takes a little more work, but once it's in place, it doesn't require much more effort than Matlab.

<ol>
<li>Download and run the <a href="http://sourceforge.net/projects/opencvlibrary/files/opencv-win/2.2/OpenCV-2.2.0-win32-vs2010.exe/download">OpenCV binary install</a>.</li>
<li>Next, open Visual Studio 2010 and create a new C++ project using the <strong>Empty Project</strong> template.</li>
<li>Open the project Property Pages for the new project (<strong>Project &gt; Properties</strong>).</li>
<li>In the tree on the left of the Property Pages window, expand <strong>Configuration Properties</strong> and select <strong>VC++ Directories</strong>.</li>
<li>Select the drop-down next to <strong>Include Directories</strong> and click <strong>Edit...</strong></li>
<li>In the <strong>Include Directories</strong> window, click on the first line of the edit box at the top of the window, and click the 'edit' button displayed (<strong>...</strong>).  Browse to the location of the OpenCV <em>include</em> directory. (For my install, the directory is <em>C:\OpenCV2.2\include</em>.)  Click <strong>Select Folder</strong>, then click <strong>OK</strong>.
<li>Select the drop-down next to <strong>Library Directories</strong> and click <strong>Edit...</strong></li>
<li>In the <strong>Library Directories</strong> window, click on the first line of the edit box at the top of the window, and click the 'edit' button displayed (<strong>...</strong>).  Browse to the location of the OpenCV <em>lib</em> directory. (For my install, the directory is <em>C:\OpenCV2.2\lib</em>.)  Click <strong>Select Folder</strong>, then click <strong>OK</strong>.
<li>In the tree on the left of the Property Pages window, under <strong>Configuration Properties</strong>, expand <strong>Linker</strong> and select <strong>Input</strong>.</li>
<li>Select the drop-down next to <strong>Additional Dependencies</strong> and click <strong>Edit...</strong>.</li>
<li>Add the following library files to the edit window displayed:
  <ul>
	<li>opencv_core220d.lib</li>
	<li>opencv_highgui220d.lib</li>
  </ul>
</li>
<li>Click <strong>OK</strong> to first exit the edit window, then to close out the Property Pages.</li>
</ol>

Now, all that's left is verifying that everything is set up and running correctly:
<ol>
  <li>Add a new C++ code file to the project, giving it whatever name is convenient.</li>
  <li>Copy the following code into the newly created file:
[sourcecode language="cpp"]
#include "opencv2/opencv.hpp"

int main(int argc, char** argv)
{
    const char* IMAGE_NAME = "OpenCV Test";
    IplImage *image = cvLoadImage("OpenCV.png");
    cvNamedWindow(IMAGE_NAME ,1);
    cvShowImage(IMAGE_NAME, image);

    cvWaitKey();
    cvDestroyWindow(IMAGE_NAME);
    cvReleaseImage(&image);

    return 0;
}

[/sourcecode]
  </li>
  <li>Open the directory containing the newly created code file by right-clicking on the project in Solution Explorer and selecting <strong>Open Folder in Windows Explorer</strong>.</li>
  <li>Copy the <a href="http://rickhaffey.files.wordpress.com/2011/06/opencv.png">OpenCV.png</a> file to this directory.</li>
  <li>Compile and run the code by hitting <strong>F5</strong> in Visual Studio.</li>
</ol>

At this point, you should see a new window open, showing the <em>OpenCV.png</em> demo image.

That's it!  We're now all set up to start moving forward with some of our first image processing concepts.

In my next post, I'll spend some time looking at the different ways to read, display, and write images in both Matlab and OpenCV.
